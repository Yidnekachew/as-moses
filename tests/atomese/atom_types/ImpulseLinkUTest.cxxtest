/*
 * tests/atoms/core/ImpulseLinkUTest.cxxtest
 *
 * Copyright (C) 2019 Yidnekachew W.
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/SchemeEval.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atoms/core/NumberNode.h>
#include <opencog/atoms/execution/Instantiator.h>
#include <opencog/util/Logger.h>
#include <opencog/asmoses/atomese/atom_types/atom_types.h>
#include "opencog/asmoses/atomese/atom_types/ImpulseLink.h"

using namespace opencog;
using namespace std;

#define al _as->add_link
#define an _as->add_node

class ImpulseLinkUTest : public CxxTest::TestSuite
{
private:
	AtomSpace *_as;
	SchemeEval *eval;

public:
	ImpulseLinkUTest(void)
	{
		logger().set_level(Logger::DEBUG);
		logger().set_print_to_stdout_flag(true);

		_as = new AtomSpace();
		eval = new SchemeEval(_as);
		eval->eval("(add-to-load-path \"" PROJECT_SOURCE_DIR "\")");
		eval->eval("(use-modules (opencog exec))");
		eval->eval("(load-from-path \"tests/atomese/atom_types/impulselink.scm\")");
	}

	~ImpulseLinkUTest()
	{
		delete eval;
		delete _as;
		// Erase the log file if no assertions failed.
		if (!CxxTest::TestTracker::tracker().suiteFailed())
			std::remove(logger().get_filename().c_str());
	}

	void setUp(void);

	void tearDown(void);

	void test_true_link(void);

	void test_or_link(void);

	void test_and_link(void);
};

void ImpulseLinkUTest::tearDown(void)
{
	_as->clear();
}

void ImpulseLinkUTest::setUp(void)
{
	_as->clear();
}

void ImpulseLinkUTest::test_true_link()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	Handle result = eval->eval_h("(cog-execute! true_link)");

	Handle expected(createNumberNode(1));

	TS_ASSERT(result == expected);
}

void ImpulseLinkUTest::test_or_link()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	Handle result = eval->eval_h("(cog-execute! or_link)");

	Handle expected(createNumberNode(1));

	TS_ASSERT(result == expected);
}

void ImpulseLinkUTest::test_and_link()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	Handle result = eval->eval_h("(cog-execute! and_link)");

	Handle expected(createNumberNode(0));

	TS_ASSERT(result == expected);
}

//	Handle A = an(CONCEPT_NODE, "X"),
//			one = al(IMPULSE_LINK),
//			c = al(PLUS_LINK, an(NUMBER_NODE, "4"), an(NUMBER_NODE, "5"));
//
//	c->execute();
//
//	one->execute();
